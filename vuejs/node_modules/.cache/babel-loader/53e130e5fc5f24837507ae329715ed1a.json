{"remainingRequest":"C:\\Users\\Souvik\\Desktop\\gindex-v4-8.2.4\\vuejs\\node_modules\\thread-loader\\dist\\cjs.js!C:\\Users\\Souvik\\Desktop\\gindex-v4-8.2.4\\vuejs\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Souvik\\Desktop\\gindex-v4-8.2.4\\vuejs\\node_modules\\eslint-loader\\index.js??ref--13-0!C:\\Users\\Souvik\\Desktop\\gindex-v4-8.2.4\\vuejs\\src\\router\\index.js","dependencies":[{"path":"C:\\Users\\Souvik\\Desktop\\gindex-v4-8.2.4\\vuejs\\src\\router\\index.js","mtime":1600781654000},{"path":"C:\\Users\\Souvik\\Desktop\\gindex-v4-8.2.4\\vuejs\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1598802962590},{"path":"C:\\Users\\Souvik\\Desktop\\gindex-v4-8.2.4\\vuejs\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1598802962851},{"path":"C:\\Users\\Souvik\\Desktop\\gindex-v4-8.2.4\\vuejs\\node_modules\\babel-loader\\lib\\index.js","mtime":1590152956206},{"path":"C:\\Users\\Souvik\\Desktop\\gindex-v4-8.2.4\\vuejs\\node_modules\\eslint-loader\\index.js","mtime":1598802979103}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}