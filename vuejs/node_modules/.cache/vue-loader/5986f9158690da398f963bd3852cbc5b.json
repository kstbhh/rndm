{"remainingRequest":"C:\\Users\\Souvik\\Desktop\\gindex-v4-8.2.4\\vuejs\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Souvik\\Desktop\\gindex-v4-8.2.4\\vuejs\\src\\views\\page\\static\\Users\\Login.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Souvik\\Desktop\\gindex-v4-8.2.4\\vuejs\\src\\views\\page\\static\\Users\\Login.vue","mtime":1600781654000},{"path":"C:\\Users\\Souvik\\Desktop\\gindex-v4-8.2.4\\vuejs\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1598802962590},{"path":"C:\\Users\\Souvik\\Desktop\\gindex-v4-8.2.4\\vuejs\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1598802962851},{"path":"C:\\Users\\Souvik\\Desktop\\gindex-v4-8.2.4\\vuejs\\node_modules\\babel-loader\\lib\\index.js","mtime":1590152956206},{"path":"C:\\Users\\Souvik\\Desktop\\gindex-v4-8.2.4\\vuejs\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1598802962590},{"path":"C:\\Users\\Souvik\\Desktop\\gindex-v4-8.2.4\\vuejs\\node_modules\\vue-loader\\lib\\index.js","mtime":1598802986487}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCB7CiAgZGVjb2RlU2VjcmV0LAogIGVuY29kZVNlY3JldCwKICBnZXRJdGVtLAogIHNldEl0ZW0sCiAgY2hlY2tQYXNzCn0gZnJvbSAnQHV0aWxzL2VuY3J5cHRVdGlscyc7CmltcG9ydCB7IGFwaVJvdXRlcyB9IGZyb20gIkAvdXRpbHMvYmFja2VuZFV0aWxzIjsKaW1wb3J0IHsgZ2V0Z2RzIH0gZnJvbSAiQHV0aWxzL2xvY2FsVXRpbHMiOwppbXBvcnQgTG9hZGluZyBmcm9tICd2dWUtbG9hZGluZy1vdmVybGF5JzsKaW1wb3J0ICd2dWUtbG9hZGluZy1vdmVybGF5L2Rpc3QvdnVlLWxvYWRpbmcuY3NzJzsKICAgIGV4cG9ydCBkZWZhdWx0IHsKICAgICAgICBjb21wb25lbnRzOiB7CiAgICAgICAgICBMb2FkaW5nCiAgICAgICAgfSwKICAgICAgICBtZXRhSW5mbygpIHsKICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgIHRpdGxlOiB0aGlzLm1ldGF0aXRsZSwKICAgICAgICAgICAgdGl0bGVUZW1wbGF0ZTogKHRpdGxlQ2h1bmspID0+IHsKICAgICAgICAgICAgICBpZih0aXRsZUNodW5rICYmIHRoaXMuc2l0ZU5hbWUpewogICAgICAgICAgICAgICAgcmV0dXJuIHRpdGxlQ2h1bmsgPyBgJHt0aXRsZUNodW5rfSB8ICR7dGhpcy5zaXRlTmFtZX1gIDogYCR7dGhpcy5zaXRlTmFtZX1gOwogICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICByZXR1cm4gIkxvYWRpbmcuLi4iCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgZGF0YSgpewogICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgICAgZW1haWwgOiAiIiwKICAgICAgICAgICAgICAgIHBhc3N3b3JkIDogIiIsCiAgICAgICAgICAgICAgICBoeXBhc3N3b3JkOiAiIiwKICAgICAgICAgICAgICAgIGRpc2FibGVkOiB0cnVlLAogICAgICAgICAgICAgICAgbWV0YXRpdGxlOiAiTG9naW4iLAogICAgICAgICAgICAgICAgbW9kYWw6IGZhbHNlLAogICAgICAgICAgICAgICAgZm9yZ290RW1haWw6ICIiLAogICAgICAgICAgICAgICAgZm9yZ290TWVzc2FnZTogIiIsCiAgICAgICAgICAgICAgICBmb3Jnb3RFcnJvck1lc3NhZ2U6IGZhbHNlLAogICAgICAgICAgICAgICAgZm9yZ290U3VjY2Vzc01lc3NhZ2U6IGZhbHNlLAogICAgICAgICAgICAgICAgZW1haWxGb2N1czogdHJ1ZSwKICAgICAgICAgICAgICAgIGdkczogW10sCiAgICAgICAgICAgICAgICBoeUlucHV0OiBmYWxzZSwKICAgICAgICAgICAgICAgIGN1cnJnZDoge30sCiAgICAgICAgICAgICAgICBwYXNzd29yZEZvY3VzOiBmYWxzZSwKICAgICAgICAgICAgICAgIHJlc3VsdG1lc3NhZ2U6ICIiLAogICAgICAgICAgICAgICAgZGF0YWJhc2VtZXNzYWdlOiAiIiwKICAgICAgICAgICAgICAgIGxvYWRpbmc6IGZhbHNlLAogICAgICAgICAgICAgICAgZnVsbHBhZ2U6IHRydWUsCiAgICAgICAgICAgICAgICBlcnJvcm1lc3NhZ2VWaXNpYmlsaXR5OiBmYWxzZSwKICAgICAgICAgICAgICAgIHN1Y2Nlc3NtZXNzYWdlVmlzaWJpbGl0eTogZmFsc2UsCiAgICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIG1ldGhvZHMgOiB7CiAgICAgICAgICAgIGhhbmRsZVN1Ym1pdChlKXsKICAgICAgICAgICAgICB0aGlzLm1ldGF0aXRsZSA9ICJMb2dnaW5nIFlvdSBJbi4uLiIKICAgICAgICAgICAgICB0aGlzLmxvYWRpbmcgPSB0cnVlOwogICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgICAgICAgICAgaWYgKHRoaXMucGFzc3dvcmQubGVuZ3RoID4gMCAmJiB0aGlzLmVtYWlsLmxlbmd0aCA+IDApIHsKICAgICAgICAgICAgICAgICAgICB0aGlzLiRiYWNrZW5kLnBvc3QoYXBpUm91dGVzLmxvZ2luUm91dGUsIHsKICAgICAgICAgICAgICAgICAgICAgICAgZW1haWw6IHRoaXMuZW1haWwsCiAgICAgICAgICAgICAgICAgICAgICAgIHBhc3N3b3JkOiB0aGlzLnBhc3N3b3JkCiAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAudGhlbihyZXNwb25zZSA9PiB7CiAgICAgICAgICAgICAgICAgICAgICBpZihyZXNwb25zZS5kYXRhLmF1dGggJiYgcmVzcG9uc2UuZGF0YS5yZWdpc3RlcmVkKXsKICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1ldGF0aXRsZSA9ICJTdWNjZXNzLi4uIjsKICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRJdGVtKCJ0b2tlbmRhdGEiLCBlbmNvZGVTZWNyZXQoSlNPTi5zdHJpbmdpZnkoeyB0b2tlbjogcmVzcG9uc2UuZGF0YS50b2tlbiAsaXNzdWVkYXRlOiByZXNwb25zZS5kYXRhLmlzc3VlZGF0LCBleHBpcnlkYXRlOiByZXNwb25zZS5kYXRhLmV4cGlyeWF0IH0pKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0SXRlbSgidXNlcmRhdGEiLCBlbmNvZGVTZWNyZXQoSlNPTi5zdHJpbmdpZnkoIHJlc3BvbnNlLmRhdGEudG9rZW51c2VyICkpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRJdGVtKCJzZXNzaW9uZGF0YSIsIGVuY29kZVNlY3JldChKU09OLnN0cmluZ2lmeSggcmVzcG9uc2UuZGF0YS5zZXNzaW9uZGF0YSApKSkKICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdG9rZW4gPSBnZXRJdGVtKCJ0b2tlbmRhdGEiKTsKICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdXNlciA9IGdldEl0ZW0oInVzZXJkYXRhIik7CiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNlc3Npb24gPSBnZXRJdGVtKCJzZXNzaW9uZGF0YSIpOwogICAgICAgICAgICAgICAgICAgICAgICAgIGlmKHRva2VuICE9IG51bGwgJiYgdXNlciAhPSBudWxsICYmIHNlc3Npb24gIT0gbnVsbCl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdG9rZW5EYXRhID0gSlNPTi5wYXJzZShkZWNvZGVTZWNyZXQodG9rZW4pKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB1c2VyRGF0YSA9IEpTT04ucGFyc2UoZGVjb2RlU2VjcmV0KHVzZXIpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9hZGluZyA9IGZhbHNlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lcnJvcm1lc3NhZ2VWaXNpYmlsaXR5ID0gZmFsc2U7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN1Y2Nlc3NtZXNzYWdlVmlzaWJpbGl0eSA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlc3VsdG1lc3NhZ2UgPSBgTG9nZ2VkIGluIFN1Y2Nlc3NmdWxseSBhcyAke3VzZXJEYXRhLm5hbWV9LiBZb3VyIHRva2VuIHdpbGwgZXhwaXJlIGF0ICR7IHRoaXMuJG1vbWVudCh0b2tlbkRhdGEuZXhwaXJ5ZGF0ZSkuZm9ybWF0KCJkZGRkLCBNTU1NIERvIFlZWVkgW2F0XSBoaDptbSBBIil9LmA7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLiRidXMuJGVtaXQoJ2xvZ2dlZCcsICdVc2VyIExvZ2dlZCcpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLiRub3RpZnkoewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogIlN1Y2Nlc3MiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAiU3VjY2Vzc2Z1bGx5IExvZ2dlZCBpbiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICJzdWNjZXNzIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYodGhpcy4kcm91dGUucGFyYW1zLm5leHRVcmwgIT0gbnVsbCl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4kcm91dGVyLnB1c2goe25hbWU6ICJyZXN1bHRzIiwgcGFyYW1zOiB7IGlkOiB0aGlzLmN1cnJnZC5pZCwgY21kOiAicmVzdWx0Iiwgc3VjY2VzczogdHJ1ZSwgZGF0YTogIkxvZyBpbiBTdWNjZXNzZnVsbC4gWW91IFdpbGwgYmUgUmVkaXJlY3RlZCBUaHJvdWdoIGEgU2VjdXJlIENoYW5uZWwuIiwgcmVkaXJlY3RVcmw6IHRoaXMuJHJvdXRlLnBhcmFtcy5uZXh0VXJsIH19KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4kcm91dGVyLnB1c2goe25hbWU6ICJyZXN1bHRzIiwgcGFyYW1zOiB7IGlkOiB0aGlzLmN1cnJnZC5pZCwgY21kOiAicmVzdWx0Iiwgc3VjY2VzczogdHJ1ZSwgdG9jbWQ6ICdob21lJywgZGF0YTogIkxvZyBpbiBTdWNjZXNzZnVsbC4gWW91IFdpbGwgYmUgUmVkaXJlY3RlZCBUaHJvdWdoIGEgU2VjdXJlIENoYW5uZWwuIiwgcmVkaXJlY3RVcmw6ICcvJyB9fSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgNTAwKQogICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuJG5vdGlmeSh7CiAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICJGYWlsZWQiLAogICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICJBdXRoZW50aWNhdGlvbiBGYWlsZWQiLAogICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICJlcnJvciIsCiAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubWV0YXRpdGxlID0gIkZhaWxlZC4uLiI7CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZXJyb3JtZXNzYWdlVmlzaWJpbGl0eSA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3VjY2Vzc21lc3NhZ2VWaXNpYmlsaXR5ID0gZmFsc2U7CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9hZGluZyA9IGZhbHNlOwogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlc3VsdG1lc3NhZ2UgPSByZXNwb25zZS5kYXRhLm1lc3NhZ2U7CiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGFzeW5jIGhhbmRsZUh5YnJpZCgpIHsKICAgICAgICAgICAgICB0aGlzLm1ldGF0aXRsZSA9ICJMb2dnaW5nIFlvdSBJbi4uLiIKICAgICAgICAgICAgICB0aGlzLmxvYWRpbmcgPSB0cnVlOwogICAgICAgICAgICAgIGNvbnN0IGh5QnJpZHBhc3MgPSB3aW5kb3cuZ2RIeWJyaWRQYXNzOwogICAgICAgICAgICAgIHZhciBzeW5jZWQgPSBhd2FpdCBjaGVja1Bhc3ModGhpcy5oeXBhc3N3b3JkLCBoeUJyaWRwYXNzKQogICAgICAgICAgICAgIGlmKHN5bmNlZCl7CiAgICAgICAgICAgICAgICBjb25zdCBoeWJyaWREYXRhID0gewogICAgICAgICAgICAgICAgICB1c2VyOiB0cnVlLAogICAgICAgICAgICAgICAgICBuYW1lOiAiQW5vbiIsCiAgICAgICAgICAgICAgICAgIGVtYWlsOiAiYW5vbnltb3VzQGdtYWlsLmNvbSIsCiAgICAgICAgICAgICAgICAgIHJlZ2lzdGVyZWREYXRlOiBEYXRlLm5vdygpLAogICAgICAgICAgICAgICAgICByb2xlOiAiVXNlciIsCiAgICAgICAgICAgICAgICAgIGFkbWluOiBmYWxzZSwKICAgICAgICAgICAgICAgICAgc3VwZXJhZG1pbjogZmFsc2UsCiAgICAgICAgICAgICAgICAgIHZlcmlmaWVkOiB0cnVlCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBhd2FpdCBzZXRJdGVtKCJoeWJyaWRUb2tlbiIsIGVuY29kZVNlY3JldChKU09OLnN0cmluZ2lmeSggaHlicmlkRGF0YSApKSk7CiAgICAgICAgICAgICAgICB2YXIgZGF0YUZyb21Mb2NhbCA9IGF3YWl0IEpTT04ucGFyc2UoZGVjb2RlU2VjcmV0KGdldEl0ZW0oImh5YnJpZFRva2VuIikpKTsKICAgICAgICAgICAgICAgIGlmKGRhdGFGcm9tTG9jYWwudXNlcil7CiAgICAgICAgICAgICAgICAgIHRoaXMubWV0YXRpdGxlID0gIlN1Y2Nlc3MuLi4iOwogICAgICAgICAgICAgICAgICB0aGlzLmxvYWRpbmcgPSBmYWxzZTsKICAgICAgICAgICAgICAgICAgdGhpcy5lcnJvcm1lc3NhZ2VWaXNpYmlsaXR5ID0gZmFsc2U7CiAgICAgICAgICAgICAgICAgIHRoaXMuc3VjY2Vzc21lc3NhZ2VWaXNpYmlsaXR5ID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgdGhpcy5yZXN1bHRtZXNzYWdlID0gYExvZ2dlZCBpbiBTdWNjZXNzZnVsbHkgYXMgR3Vlc3QgVXNlci5Zb3Ugd2lsbCBMb2cgT3V0IGFmdGVyIHRoaXMgQnJvd3NlciBTZXNzaW9uLmA7CiAgICAgICAgICAgICAgICAgIHRoaXMuJGJ1cy4kZW1pdCgnbG9nZ2VkJywgJ1VzZXIgTG9nZ2VkJyk7CiAgICAgICAgICAgICAgICAgIHRoaXMuJG5vdGlmeSh7CiAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICJTdWNjZXNzIiwKICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAiU3VjY2Vzc2Z1bGx5IExvZ2dlZCBpbiIsCiAgICAgICAgICAgICAgICAgICAgdHlwZTogInN1Y2Nlc3MiLAogICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHsKICAgICAgICAgICAgICAgICAgICB0aGlzLiRyb3V0ZXIucHVzaCh7bmFtZTogInJlc3VsdHMiLCBwYXJhbXM6IHsgaWQ6IHRoaXMuY3VycmdkLmlkLCBjbWQ6ICJyZXN1bHQiLCBzdWNjZXNzOiB0cnVlLCB0b2NtZDogJ2hvbWUnLCBkYXRhOiAiTG9nIGluIFN1Y2Nlc3NmdWxsLiBZb3UgV2lsbCBiZSBSZWRpcmVjdGVkIFRocm91Z2ggYSBTZWN1cmUgQ2hhbm5lbC4iLCByZWRpcmVjdFVybDogJy8nIH19KQogICAgICAgICAgICAgICAgICB9LCA1MDApCiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICB0aGlzLm1ldGF0aXRsZSA9ICJGYWlsZWQuLi4iOwogICAgICAgICAgICAgICAgICB0aGlzLmxvYWRpbmcgPSBmYWxzZTsKICAgICAgICAgICAgICAgICAgdGhpcy5lcnJvcm1lc3NhZ2VWaXNpYmlsaXR5ID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgdGhpcy5zdWNjZXNzbWVzc2FnZVZpc2liaWxpdHkgPSBmYWxzZTsKICAgICAgICAgICAgICAgICAgdGhpcy5yZXN1bHRtZXNzYWdlID0gYEh5YnJpZCBQYXNzd29yZCBpcyBXcm9uZ2A7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHRoaXMuJG5vdGlmeSh7CiAgICAgICAgICAgICAgICAgIHRpdGxlOiAiRmFpbGVkIiwKICAgICAgICAgICAgICAgICAgbWVzc2FnZTogIkF1dGhlbnRpY2F0aW9uIEZhaWxlZCIsCiAgICAgICAgICAgICAgICAgIHR5cGU6ICJlcnJvciIsCiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgdGhpcy5tZXRhdGl0bGUgPSAiRmFpbGVkLi4uIjsKICAgICAgICAgICAgICAgIHRoaXMubG9hZGluZyA9IGZhbHNlOwogICAgICAgICAgICAgICAgdGhpcy5lcnJvcm1lc3NhZ2VWaXNpYmlsaXR5ID0gdHJ1ZTsKICAgICAgICAgICAgICAgIHRoaXMuc3VjY2Vzc21lc3NhZ2VWaXNpYmlsaXR5ID0gZmFsc2U7CiAgICAgICAgICAgICAgICB0aGlzLnJlc3VsdG1lc3NhZ2UgPSBgSHlicmlkIFBhc3N3b3JkIGlzIFdyb25nYDsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGNoZWNrUGFyYW1zKCkgewogICAgICAgICAgICAgIGlmKHRoaXMuJHJvdXRlLnBhcmFtcy5lbWFpbCl7CiAgICAgICAgICAgICAgICB0aGlzLmVtYWlsID0gdGhpcy4kcm91dGUucGFyYW1zLmVtYWlsCiAgICAgICAgICAgICAgICB0aGlzLmVtYWlsRm9jdXMgPSBmYWxzZTsKICAgICAgICAgICAgICAgIHRoaXMucGFzc3dvcmRGb2N1cyA9IHRydWU7CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHRoaXMuZW1haWxGb2N1cyA9IHRydWU7CiAgICAgICAgICAgICAgICB0aGlzLnBhc3N3b3JkRm9jdXMgPSBmYWxzZTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGdvdG9QYWdlKHVybCwgY21kKSB7CiAgICAgICAgICAgICAgaWYoY21kKXsKICAgICAgICAgICAgICAgIHRoaXMuJHJvdXRlci5wdXNoKHsgcGF0aDogJy8nKyB0aGlzLmN1cnJnZC5pZCArICc6JyArIGNtZCArIHVybCB9KQogICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICB0aGlzLiRyb3V0ZXIucHVzaCh7IHBhdGg6ICcvJysgdGhpcy5jdXJyZ2QuaWQgKyAnOicgKyB1cmwgfSkKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHZhbGlkYXRlRGF0YSgpewogICAgICAgICAgICAgIGNvbnN0IGVtYWlsUmVnZXggPSAvW2EtejEtOV0uK0ArW2EtejEtOUEtWl0uK1suXVthLXpdKy9nCiAgICAgICAgICAgICAgaWYoZW1haWxSZWdleC50ZXN0KHRoaXMuZW1haWwpICYmIHRoaXMucGFzc3dvcmQubGVuZ3RoID4gMCl7CiAgICAgICAgICAgICAgICB0aGlzLmRpc2FibGVkID0gZmFsc2U7CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHRoaXMuZGlzYWJsZWQgPSB0cnVlOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgaGFuZGxlRm9yZ290UGFzcyhlKSB7CiAgICAgICAgICAgICAgdGhpcy5tZXRhdGl0bGUgPSAiRm9yZ290IFBhc3N3b3JkIjsKICAgICAgICAgICAgICB0aGlzLmxvYWRpbmcgPSB0cnVlOwogICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTsKICAgICAgICAgICAgICBpZih0aGlzLmZvcmdvdEVtYWlsLmxlbmd0aCA+IDApewogICAgICAgICAgICAgICAgdGhpcy4kYmFja2VuZC5wb3N0KGFwaVJvdXRlcy5mb3Jnb3RQYXNzLCB7CiAgICAgICAgICAgICAgICAgIGVtYWlsOiB0aGlzLmZvcmdvdEVtYWlsCiAgICAgICAgICAgICAgICB9KS50aGVuKHJlc3BvbnNlID0+IHsKICAgICAgICAgICAgICAgICAgaWYocmVzcG9uc2UuZGF0YS5hdXRoICYmIHJlc3BvbnNlLmRhdGEucmVnaXN0ZXJlZCAmJiByZXNwb25zZS5kYXRhLmNoYW5nZWQpewogICAgICAgICAgICAgICAgICAgIHRoaXMubG9hZGluZyA9IGZhbHNlOwogICAgICAgICAgICAgICAgICAgIHRoaXMuZm9yZ290U3VjY2Vzc01lc3NhZ2UgPSB0cnVlOwogICAgICAgICAgICAgICAgICAgIHRoaXMuZm9yZ290RXJyb3JNZXNzYWdlID0gZmFsc2U7CiAgICAgICAgICAgICAgICAgICAgdGhpcy4kbm90aWZ5KHsKICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAiU3VjY2VzcyIsCiAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAiUGFzc3dvcmQgUmVzZXQgU3VjY2VzcyIsCiAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAic3VjY2VzcyIsCiAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICB0aGlzLm1ldGF0aXRsZSA9ICJQYXNzd29yZCBSZXNldCBTdWNjZXNzIjsKICAgICAgICAgICAgICAgICAgICB0aGlzLmZvcmdvdE1lc3NhZ2UgPSByZXNwb25zZS5kYXRhLm1lc3NhZ2UKICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICB0aGlzLmxvYWRpbmcgPSBmYWxzZTsKICAgICAgICAgICAgICAgICAgICB0aGlzLiRub3RpZnkoewogICAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICJGYWlsZWQiLAogICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogIlBhc3N3b3JkIFJlc2V0IEZhaWxlZCIsCiAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAiZXJyb3IiLAogICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgdGhpcy5mb3Jnb3RTdWNjZXNzTWVzc2FnZSA9IGZhbHNlOwogICAgICAgICAgICAgICAgICAgIHRoaXMuZm9yZ290RXJyb3JNZXNzYWdlID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICB0aGlzLm1ldGF0aXRsZSA9ICJQYXNzd29yZCBSZXNldCBGYWlsZWQiOwogICAgICAgICAgICAgICAgICAgIHRoaXMuZm9yZ290TWVzc2FnZSA9IHJlc3BvbnNlLmRhdGEubWVzc2FnZTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgdGhpcy5sb2FkaW5nID0gZmFsc2U7CiAgICAgICAgICAgICAgICB0aGlzLmZvcmdvdFN1Y2Nlc3NNZXNzYWdlID0gZmFsc2U7CiAgICAgICAgICAgICAgICB0aGlzLmZvcmdvdEVycm9yTWVzc2FnZSA9IHRydWU7CiAgICAgICAgICAgICAgICB0aGlzLmZvcmdvdE1lc3NhZ2UgPSAiUGxlYXNlIFR5cGUgaW4gWW91ciBFbWFpbCBGaXJzdC4iCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICBjb21wdXRlZDogewogICAgICAgICAgaXNtb2JpbGUoKSB7CiAgICAgICAgICAgIHZhciB3aWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoID4gMCA/IHdpbmRvdy5pbm5lcldpZHRoIDogc2NyZWVuLndpZHRoOwogICAgICAgICAgICBpZih3aWR0aCA+IDk2Nil7CiAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlCiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgcmV0dXJuIHRydWUKICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgIHNpdGVOYW1lKCkgewogICAgICAgICAgICByZXR1cm4gd2luZG93Lmdkcy5maWx0ZXIoKGl0ZW0sIGluZGV4KSA9PiB7CiAgICAgICAgICAgICAgcmV0dXJuIGluZGV4ID09IHRoaXMuJHJvdXRlLnBhcmFtcy5pZDsKICAgICAgICAgICAgfSlbMF07CiAgICAgICAgICB9LAogICAgICAgIH0sCiAgICAgICAgbW91bnRlZCgpIHsKICAgICAgICAgIGlmKHRoaXMuJGF1ZGlvLnBsYXllcigpICE9IHVuZGVmaW5lZCkgdGhpcy4kYXVkaW8uZGVzdHJveSgpOwogICAgICAgICAgdGhpcy5jaGVja1BhcmFtcygpOwogICAgICAgIH0sCiAgICAgICAgY3JlYXRlZCgpIHsKICAgICAgICAgIGxldCBnZGRhdGEgPSBnZXRnZHModGhpcy4kcm91dGUucGFyYW1zLmlkKTsKICAgICAgICAgIHRoaXMuZ2RzID0gZ2RkYXRhLmdkczsKICAgICAgICAgIHRoaXMuY3VycmdkID0gZ2RkYXRhLmN1cnJlbnQ7CiAgICAgICAgfSwKICAgICAgICB3YXRjaDogewogICAgICAgICAgZW1haWw6ICJ2YWxpZGF0ZURhdGEiLAogICAgICAgICAgcGFzc3dvcmQ6ICJ2YWxpZGF0ZURhdGEiLAogICAgICAgIH0sCiAgICB9Cg=="},null]}